/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reflection.test;

import reflection.test.model.Changes;
import reflection.test.model.Person;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.time.LocalDate;
import java.time.Month;
import java.util.ArrayList;
import java.util.List;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {
        System.out.println(new App().getGreeting());

        Person raphael = new Person();
        raphael.setNome("Raphael Fontoura");
        raphael.setAniversario(LocalDate.of(1979, Month.NOVEMBER, 26));

        Person raphaelAltera = new Person();
        raphaelAltera.setNome("Raphael C Fontoura");
        raphaelAltera.setAtivo(true);

        try {
            Field[] declaredFields = raphael.getClass().getDeclaredFields();
            for (Field field: declaredFields) {
                String fieldName = field.getName();
                String getMethod = "get" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);
                Method method = raphael.getClass().getMethod(getMethod);
                Object invokeResult = method.invoke(raphael);
                System.out.println(invokeResult);
            }

            if (! raphael.equals(raphaelAltera)) {
                List<Changes> changes = new ArrayList<>();
                for (Field field: declaredFields) {
                    String fieldName = field.getName();
                    String getMethod = "get" + fieldName.substring(0,1).toUpperCase() + fieldName.substring(1);
                    Method method = raphael.getClass().getMethod(getMethod);
                    Object entityResult = method.invoke(raphael);
                    Object otherResult = method.invoke(raphaelAltera);
                    if (isNotEqual(entityResult, otherResult)) {
                        Changes change = new Changes();
                        change.setField(fieldName);
                        change.setOldValue(entityResult == null ? "-" : entityResult.toString());
                        change.setNewValue(otherResult == null ? "-" : otherResult.toString());
                        changes.add(change);
                    }
                }
                for (Changes change: changes) {
                    System.out.println(change);
                }
            }
        } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException err) {
            System.out.println(err.getMessage());
        }

    }

    public static <T> boolean isNotEqual(T entityValue, T dtoValue) {
        if (entityValue == null && dtoValue != null || entityValue != null && dtoValue == null) {
            return true;
        }
        assert entityValue != null;
        return !entityValue.equals(dtoValue);
    }
}
